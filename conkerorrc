// Mozrepl
//
if ('@hyperstruct.net/mozlab/mozrepl;1' in Cc) {
    let mozrepl = Cc['@hyperstruct.net/mozlab/mozrepl;1']
        .getService(Ci.nsIMozRepl);
    if (! mozrepl.isActive())
        mozrepl.start(4242, true);
}

load_paths.unshift("chrome://conkeror-contrib/content/");

/// Session save and restore
require("session.js");

/// Show a tweaked modeline
require("mode-line.js");
require("mode-line-buttons.js");
//mode_line_add_buttons(standard_mode_line_buttons, true);
add_hook("mode_line_hook", mode_line_adder(buffer_count_widget), true);
add_hook("mode_line_hook", mode_line_adder(loading_count_widget), true);
remove_hook("mode_line_hook", mode_line_adder(clock_widget));
require("favicon");
add_hook("mode_line_hook", mode_line_adder(buffer_icon_widget), true);

/// Enable history browsing
define_browser_object_class(
    "history-url", null,
    function (I, prompt) {
        check_buffer (I.buffer, content_buffer);
        var result = yield I.buffer.window.minibuffer.read_url(
            $prompt = prompt,  $use_webjumps = false, $use_history = true, $use_bookmarks = false);
        yield co_return (result);
    });

interactive("find-url-from-history",
    "Find a page from history in the current buffer",
    "find-url",
    $browser_object = browser_object_history_url);

interactive("find-url-from-history-new-buffer",
    "Find a page from history in the current buffer",
    "find-url-new-buffer",
    $browser_object = browser_object_history_url);

define_key(content_buffer_normal_keymap, "h", "find-url-from-history-new-buffer");
define_key(content_buffer_normal_keymap, "H", "find-url-from-history");

/// Add webjumps
define_webjump("hoogle", "http://haskell.org/hoogle/?hoogle=%s", $alternative = "http://haskell.org/hoogle/");

define_webjump("hackage", "http://google.com/search?as_sitesearch=hackage.haskell.org%2Fpackage&as_q=%s");

/// Send Firefox-compatible user agent string to some sites
require("user-agent-policy");

user_agent_policy.define_policy("whatsapp",
    "Mozilla/5.0 (X11; Linux x86_64; rv:54.0) Gecko/20100101 Firefox/54.0",
    "web.whatsapp.com");
user_agent_policy.define_policy("satelslack",
    "Mozilla/5.0 (X11; Linux x86_64; rv:54.0) Gecko/20100101 Firefox/54.0",
    "teamsatellite.slack.com");
user_agent_policy.define_policy("limpyslack",
    "Mozilla/5.0 (X11; Linux x86_64; rv:54.0) Gecko/20100101 Firefox/54.0",
    "limpynet.slack.com");
user_agent_policy.define_policy("pivotal",
    "Mozilla/5.0 (X11; Linux x86_64; rv:54.0) Gecko/20100101 Firefox/54.0",
    "www.pivotaltracker.com");

/// xkcd
xkcd_add_title = true;

/// Get cookie
function getSessionCookie(url) {
    var ios = Components.classes["@mozilla.org/network/io-service;1"]
        .getService(Components.interfaces.nsIIOService);
    var uri = ios.newURI(url, null, null);
    var cookieSvc = Components.classes["@mozilla.org/cookieService;1"]
        .getService(Components.interfaces.nsICookieService);
    var cookie = cookieSvc.getCookieStringFromHttp(uri, uri, null);
    return cookie;
}

/// Allow full-screen
user_pref('full-screen-api.enabled', true);

// set default webjump
read_url_handler_list = [read_url_make_default_webjump_handler("google")];
// possibly valid URL
function possibly_valid_url (str) {
    return (/[\.\/:]/.test(str)) &&
        !(/\S\s+\S/.test(str)) &&
        !(/^\s*$/.test(str));
}

/// Disable conkeror interpretation of keys on some sites
require("key-kill");
key_kill_mode.test.push(/^https:\/\/jira.cgm.ag\//);
key_kill_mode.test.push(/^http:\/\/localhost:10080\//);
key_kill_input_fields = true;

