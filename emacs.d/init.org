#+TITLE: The dotfile root

* Purpose

This file is tangled on Emacs startup, which will result in both more configuration to be loaded by Emacs and dotfiles to serve as configuration for other programs.

* Mail configuration

I used to check mail with gnus, directly from the imap-server (in the Exchange case, from davmail), but gnus is quite slow, and when checking mail, freezes Emacs a bit.
After reading http://cachestocaches.com/2017/3/complete-guide-email-emacs-using-mu-and-/, I decided to setup a different configuration, and use mu, mu4e and offlineimap.

** Offline imap
:PROPERTIES:
:header-args: :tangle ~/.offlineimaprc :comments noweb :tangle-mode (identity #o444)
:END:

#+BEGIN_SRC conf
  [general]
  accounts = Gmail, Exchange
  maxsyncaccounts = 2

  [Account Gmail]
  localrepository = LocalGmail
  remoterepository = RepositoryGmail
  autorefresh = 5
  quick = 10
  postsynchook = mu index --maildir ~/Maildir
  status_backend = sqlite

  [Reposiroty LocalGmail]
  type = Maildir
  localfolders = ~/Maildir/Gmail

  [Reposiroty RepositoryGmail]
  type = Gmail
  maxconnections = 2
  remoteuser = YOUR_GMAIL_USERNAME
  remotepass = YOUR_GMAIL_PASSWORD
  folderfilter = lambda foldername: foldername not in ['[Gmail]/All Mail', '[Gmail]/Important']
  sslcacertfile = /usr/local/etc/openssl/cert.pem  # This will only work for macOS

  # These are effectively the same as the above
  [Account Exchange]
  localrepository = LocalExchange
  remoterepository = RepositoryExchange
  autorefresh = 5
  quick = 10
  postsynchook = mu index --maildir ~/Maildir
  status_backend = sqlite

  [Repository LocalExchange]
  type = Maildir
  localfolders = ~/Maildir/Exchange

  [Repository RemoteExchange]
  type = Imap
  maxconnections = 2
  remoteuser = YOUR_EXCHANGE_USERNAME
  remotepass = YOUR_EXCHANGE_PASSWORD
  #folderfilter = lambda foldername: foldername not in ['[Exchange]/All Mail', '[Exchange]/Important']

  sslcacertfile = /usr/local/etc/openssl/cert.pem  # This will only work for macOS
#+END_SRC

* Emacs configuration
:PROPERTIES:
:header-args: :tangle ./init.org.el :comments noweb :tangle-mode (identity #o444)
:END:

** Package preparation

*** Package sources

#+BEGIN_SRC emacs-lisp
  (add-to-list 'load-path (expand-file-name "~/.emacs.d/elpa"))

  (setq package-archives '(("gnu"          . "http://elpa.gnu.org/packages/")
                           ("melpa-stable" . "http://stable.melpa.org/packages/")
                           ("melpa"        . "http://melpa.org/packages/")
                           ("org"          . "http://orgmode.org/elpa/")))

  (package-initialize)
#+END_SRC

*** ~use-package~

Then, we'll use ~use-package~ to install and configure all others.

#+BEGIN_SRC emacs-lisp
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))

  (eval-when-compile
    (require 'use-package))
#+END_SRC

Ensure that a package is installed by default (why would I enter it otherwise?)

#+BEGIN_SRC emacs-lisp
  (setq use-package-always-ensure t)
#+END_SRC

*** ~paradox~

Finally, we'll switch to using paradox, for its async execution and automatic updating functionalities.

#+BEGIN_SRC emacs-lisp
  (use-package paradox
    :config
    (progn
      (setq paradox-execute-asynchronously t)
      (paradox-enable)
      (paradox-refresh-upgradeable-packages)))
#+END_SRC

** Custom settings

They should not be set in the generated ~init.org.el~, but sometimes I want to see what a customization does.

#+BEGIN_SRC emacs-lisp
  (setq custom-file "~/.emacs.d/custom.el")
  (when (file-exists-p custom-file) (load custom-file))
#+END_SRC

** Basic utils

~dash.el~, ~f.el~ and ~s.el~ cannot be omitted, as they provide very useful tools for emacs-lisp programming.

#+BEGIN_SRC emacs-lisp
  (use-package dash)
  (use-package s)
  (use-package f)
#+END_SRC

** Aesthetics

I want my Emacs to look good.

*** No mouse cruft

Please, use all my screen real estate for information, not for "places to click on".

#+BEGIN_SRC emacs-lisp
  (when (fboundp 'menu-bar-mode) (menu-bar-mode -1))
  (when (fboundp 'tool-bar-mode) (tool-bar-mode -1))
  (when (fboundp 'scroll-bar-mode) (scroll-bar-mode -1))
  (if (fboundp 'tooltip-mode) (tooltip-mode -1) (setq tooltip-use-echo-area t))
  (fringe-mode '(4 . 0))
#+END_SRC

*** Show me info about my buffer

I want to know where am, and have immediate visual feedback about my text.

#+BEGIN_SRC emacs-lisp
  (global-hl-line-mode)
  (column-number-mode)
  (show-paren-mode)

  (use-package linum
    :config (global-linum-mode))
#+END_SRC

*** Theme to use

This is the theme I will use currently.

#+BEGIN_SRC emacs-lisp
  (use-package leuven-theme
    :config (load-theme 'leuven t))
#+END_SRC

*** Mode line

#+BEGIN_SRC emacs-lisp
  (use-package powerline
    :config (powerline-default-theme))
#+END_SRC

** Menus and discovery

*** ~helm~

I've used ~helm~ for quite some time now, and I like the way it works.  Therefore, it's the default menu for everything now.

#+BEGIN_SRC emacs-lisp
  (use-package helm
    :bind (("M-x" . helm-M-x)
           ("C-x C-f" . helm-find-files)
           ("M-y" . helm-show-kill-ring)
           ("C-x b" . helm-mini))
    :init (progn
            (require 'helm-config)
            (helm-mode 1)
            (helm-autoresize-mode t)))
#+END_SRC

** Projects

Each project is either a version controlled (~magit~!) directory, or some directory I want to be able to browse at once (local repos of files, e.g. videos or pictures).

*** Version control

#+BEGIN_SRC emacs-lisp
  (use-package magit
    :commands (magit-git-repo-p
               magit-status-internal)
    :bind (("C-c g" . magit-status))
    :config
    (setq magit-commit-arguments (if (eq system-type 'gnu/linux)
                                     '("--gpg-sign")
                                   '(""))
          magit-diff-arguments '("--ignore-space-change"
                                 "--ignore-all-space"
                                 "--no-ext-diff"
                                 "-M"
                                 "-C")
          magit-log-arguments '("--graph"
                                "--color"
                                "--decorate"
                                "--show-signature"
                                "-n256")
          magit-merge-arguments '("--no-ff")
          magit-rebase-arguments '("--autostash")
          magit-diff-refine-hunk t)
    (use-package git-timemachine)
    (when (eq system-type 'windows-nt)
      (setq magit-git-executable "c:/Program Files/Git/bin/git.exe")))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package diff-hl
    :config (progn
              (add-hook 'magit-post-refresh-hook 'diff-hl-magit-post-refresh)
              (global-diff-hl-mode)))
#+END_SRC

*** Navigation

#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :bind (("M-P" . helm-projectile))
    :diminish projectile-mode
    :config (progn
              (projectile-global-mode)
              (setq projectile-indexing-method 'alien
                    projectile-completion-system 'helm
                    ;; projectile-enable-caching t ;; This messes up tramp-sudo, see https://github.com/bbatsov/projectile/issues/835
                    projectile-enable-idle-timer t)
              (use-package helm-ag)
              (use-package helm-projectile
                :config (progn
                          (helm-projectile-on)
                          (setq projectile-switch-project-action (lambda () (if (magit-git-repo-p (projectile-project-root))
                                                                           (magit-status-internal (projectile-project-root))
                                                                         (dired (projectile-project-root)))))))
              (setq magit-repository-directories (mapcar (lambda (dir)
                                                           (substring dir 0 -1))
                                                         (-filter (lambda (project)
                                                                    (file-directory-p (concat project "/.git/")))
                                                                  (projectile-relevant-known-projects)))
                    magit-repository-directories-depth 1)))
#+END_SRC

** Completion

*** ~company~

#+BEGIN_SRC emacs-lisp
  (use-package company
    :config (progn
              (global-company-mode)
              (setq company-idle-delay 0.1)))
#+END_SRC

** Programming

*** General stuff

I use flycheck for almost any buffer that can be checked, so enable it everywhere.

#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :config (global-flycheck-mode))
#+END_SRC

I like my parentheses balanced, thank you!

#+BEGIN_SRC emacs-lisp
  (use-package smartparens
    :config (progn
              (require 'smartparens-config)
              (show-smartparens-global-mode)
              (smartparens-global-strict-mode)
              (sp-use-paredit-bindings)))
#+END_SRC

Also, please indent my code smartly (except for in F#, it does not play nice there)!

#+BEGIN_SRC emacs-lisp
  (use-package aggressive-indent
    :config (progn
              (global-aggressive-indent-mode)
              (add-to-list 'aggressive-indent-excluded-modes 'fsharp-mode)))
#+END_SRC

*** F#

In F#, I'd like to set the following settings:

#+BEGIN_SRC emacs-lisp
  (use-package fsharp-mode
    :config (setq fsharp-indent-offset 2))
#+END_SRC
