#+TITLE: The dotfile root

* Purpose

This file is tangled on Emacs startup, which will result in both more configuration to be loaded by Emacs and dotfiles to serve as configuration for other programs.

* Mail configuration

I used to check mail with gnus, directly from the imap-server (in the Exchange case, from davmail), but gnus is quite slow, and when checking mail, freezes Emacs a bit.
After reading http://cachestocaches.com/2017/3/complete-guide-email-emacs-using-mu-and-/, I decided to setup a different configuration, and use mu, mu4e and offlineimap.

** Offline imap
:PROPERTIES:
:header-args: :tangle ~/.offlineimaprc :comments noweb :tangle-mode (identity #o444)
:END:

#+BEGIN_SRC conf
  [general]
  accounts = Gmail, Exchange
  maxsyncaccounts = 2

  [Account Gmail]
  localrepository = LocalGmail
  remoterepository = RepositoryGmail
  autorefresh = 5
  quick = 10
  postsynchook = mu index --maildir ~/Maildir
  status_backend = sqlite

  [Reposiroty LocalGmail]
  type = Maildir
  localfolders = ~/Maildir/Gmail

  [Reposiroty RepositoryGmail]
  type = Gmail
  maxconnections = 2
  remoteuser = YOUR_GMAIL_USERNAME
  remotepass = YOUR_GMAIL_PASSWORD
  folderfilter = lambda foldername: foldername not in ['[Gmail]/All Mail', '[Gmail]/Important']
  sslcacertfile = /usr/local/etc/openssl/cert.pem  # This will only work for macOS

  # These are effectively the same as the above
  [Account Exchange]
  localrepository = LocalExchange
  remoterepository = RepositoryExchange
  autorefresh = 5
  quick = 10
  postsynchook = mu index --maildir ~/Maildir
  status_backend = sqlite

  [Repository LocalExchange]
  type = Maildir
  localfolders = ~/Maildir/Exchange

  [Repository RemoteExchange]
  type = Imap
  maxconnections = 2
  remoteuser = YOUR_EXCHANGE_USERNAME
  remotepass = YOUR_EXCHANGE_PASSWORD
  #folderfilter = lambda foldername: foldername not in ['[Exchange]/All Mail', '[Exchange]/Important']

  sslcacertfile = /usr/local/etc/openssl/cert.pem  # This will only work for macOS
#+END_SRC

* Emacs configuration
:PROPERTIES:
:header-args: :tangle ./init.org.el :comments noweb :tangle-mode (identity #o444)
:END:

** Package preparation

*** Package sources

#+BEGIN_SRC emacs-lisp
  (add-to-list 'load-path (expand-file-name "~/.emacs.d/elpa"))

  (setq package-archives '(("gnu"          . "http://elpa.gnu.org/packages/")
                           ("melpa-stable" . "http://stable.melpa.org/packages/")
                           ("melpa"        . "http://melpa.org/packages/")
                           ("org"          . "http://orgmode.org/elpa/")))

  (package-initialize)
#+END_SRC

*** ~use-package~

Then, we'll use ~use-package~ to install and configure all others.

#+BEGIN_SRC emacs-lisp
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))

  (eval-when-compile
    (require 'use-package))
#+END_SRC

Ensure that a package is installed by default (why would I enter it otherwise?)

#+BEGIN_SRC emacs-lisp
  (setq use-package-always-ensure t)
#+END_SRC

*** ~paradox~

Finally, we'll switch to using paradox, for its async execution and automatic updating functionalities.

#+BEGIN_SRC emacs-lisp
  (use-package paradox
    :config
    (progn
      (setq paradox-execute-asynchronously t)
      (paradox-enable)
      (paradox-refresh-upgradeable-packages)))
#+END_SRC

** Custom settings

They should not be set in the generated ~init.org.el~, but sometimes I want to see what a customization does.

#+BEGIN_SRC emacs-lisp
  (setq custom-file "~/.emacs.d/custom.el")
  (when (file-exists-p custom-file) (load custom-file))
#+END_SRC

** Aesthetics

I want my Emacs to look good.

*** No mouse cruft

Please, use all my screen real estate for information, not for "places to click on".

#+BEGIN_SRC emacs-lisp
  (when (fboundp 'menu-bar-mode) (menu-bar-mode -1))
  (when (fboundp 'tool-bar-mode) (tool-bar-mode -1))
  (when (fboundp 'scroll-bar-mode) (scroll-bar-mode -1))
  (if (fboundp 'tooltip-mode) (tooltip-mode -1) (setq tooltip-use-echo-area t))
  (fringe-mode '(4 . 0))
#+END_SRC

*** Show me info about my buffer

I want to know where am, and have immediate visual feedback about my text.

#+BEGIN_SRC emacs-lisp
  (setq global-hl-line-sticky-flag t)
  (global-hl-line-mode)
  (column-number-mode)
  (show-paren-mode)

  (use-package linum
    :config (global-linum-mode))
#+END_SRC

